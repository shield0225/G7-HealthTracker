trigger:
  - main

pool:
  name: COMP367-Windows

stages:
  - stage: Prepare
    displayName: 'Preparation Stage'
    jobs:
      - job: CheckoutAndSetup
        displayName: 'Checkout and Setup Environment'
        steps:
        
        - checkout: self
          displayName: 'Checkout Repository'

        - task: NodeTool@0
          inputs:
            versionSpec: '20.12.2'
          displayName: 'Install Node.js'

        - task: Cache@2
          inputs:
            key: 'npm | "$(Agent.OS)" | package-lock.json'
            restoreKeys: 'npm | "$(Agent.OS)"'
            path: $(Build.SourcesDirectory)/node_modules
          displayName: 'Cache node_modules'

  - stage: BuildAndTest
    displayName: 'Build and Test Stage'
    jobs:
      - job: Build
        displayName: 'Build Application'
        steps:
        - script: |
            echo "Installing dependencies..."
            npm install
            echo "Compiling application using build tool (npm)..."
            npm run build
          displayName: 'Compile Project'

        - script: |
            echo "Running unit tests and generating code coverage report..."
            npm run test --coverage
          displayName: 'Unit Tests and Code Coverage'
          continueOnError: true

  - stage: DeliverArtifact
    displayName: 'Deliver Artifact'
    jobs:
      - job: PublishArtifact
        displayName: 'Publish Artifact'
        steps:
        - task: PublishBuildArtifacts@1
          inputs:  
            PathtoPublish: '$(Build.SourcesDirectory)/build'  
            ArtifactName: 'node_app'
            publishLocation: 'container'
          displayName: 'Publish Artifact'

  - stage: Analyze
    displayName: 'Code Analysis Stage'
    jobs:
      - job: SonarQubeAnalysis
        displayName: 'SonarQube Analysis'
        steps:

        - task: SonarQubePrepare@5
          inputs:
            SonarQube: 'SonarQube-community'
            scannerMode: 'CLI'
            configMode: 'file'
            extraProperties: |
              sonar.projectKey=DevOps-Implementation-FrontEnd

        - task: SonarQubeAnalyze@5
          inputs:
            jdkversion: 'JAVA_HOME_17_X64'

        - task: SonarQubePublish@5
          inputs:
            pollingTimeoutSec: '300'

  - stage: DeployDev
    displayName: 'Deploy to Dev Environment'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - deployment: DeployDevJob
        displayName: 'Deployment to Dev'
        environment: 'development'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: node-app
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    appType: webApp
                    azureSubscription: 'AzureSubscription'  
                    appName: 'DevOps-HealthTracker-Dev'
                    slotName: 'dev'
                    package: $(Pipeline.Workspace)/node-app  

  - stage: DeployQAT
    displayName: 'Deploy to QAT Environment'
    jobs:
      - deployment: DeployQATJob
        displayName: 'Deployment to QAT'
        environment: 'qat'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Deploying to QAT Server..."
                    # Mock deployment commands
                  displayName: 'Deploy to QAT'

  - stage: DeployStaging
    displayName: 'Deploy to Staging Environment'
    jobs:
      - deployment: DeployStagingJob
        displayName: 'Deployment to Staging'
        environment: 'staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Deploying to Staging Server..."
                    # Mock deployment commands
                  displayName: 'Deploy to Staging'

  - stage: DeployProd
    displayName: 'Deploy to Production Environment'
    jobs:
      - deployment: DeployProdJob
        displayName: 'Deployment to Production'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Deploying to Production Server..."
                    # Mock deployment commands
                  displayName: 'Deploy to Production'
